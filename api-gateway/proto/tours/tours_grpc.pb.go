// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.32.1
// source: proto/tours/tours.proto

package tours

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	TourExecutionService_AbandonTourExecution_FullMethodName  = "/tours.TourExecutionService/AbandonTourExecution"
	TourExecutionService_CompleteTourExecution_FullMethodName = "/tours.TourExecutionService/CompleteTourExecution"
)

// TourExecutionServiceClient is the client API for TourExecutionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// ===== Service =====
type TourExecutionServiceClient interface {
	AbandonTourExecution(ctx context.Context, in *AbandonTourExecutionRequest, opts ...grpc.CallOption) (*TourExecutionResponse, error)
	CompleteTourExecution(ctx context.Context, in *CompleteTourExecutionRequest, opts ...grpc.CallOption) (*TourExecutionResponse, error)
}

type tourExecutionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTourExecutionServiceClient(cc grpc.ClientConnInterface) TourExecutionServiceClient {
	return &tourExecutionServiceClient{cc}
}

func (c *tourExecutionServiceClient) AbandonTourExecution(ctx context.Context, in *AbandonTourExecutionRequest, opts ...grpc.CallOption) (*TourExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TourExecutionResponse)
	err := c.cc.Invoke(ctx, TourExecutionService_AbandonTourExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *tourExecutionServiceClient) CompleteTourExecution(ctx context.Context, in *CompleteTourExecutionRequest, opts ...grpc.CallOption) (*TourExecutionResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(TourExecutionResponse)
	err := c.cc.Invoke(ctx, TourExecutionService_CompleteTourExecution_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TourExecutionServiceServer is the server API for TourExecutionService service.
// All implementations must embed UnimplementedTourExecutionServiceServer
// for forward compatibility.
//
// ===== Service =====
type TourExecutionServiceServer interface {
	AbandonTourExecution(context.Context, *AbandonTourExecutionRequest) (*TourExecutionResponse, error)
	CompleteTourExecution(context.Context, *CompleteTourExecutionRequest) (*TourExecutionResponse, error)
	mustEmbedUnimplementedTourExecutionServiceServer()
}

// UnimplementedTourExecutionServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedTourExecutionServiceServer struct{}

func (UnimplementedTourExecutionServiceServer) AbandonTourExecution(context.Context, *AbandonTourExecutionRequest) (*TourExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AbandonTourExecution not implemented")
}
func (UnimplementedTourExecutionServiceServer) CompleteTourExecution(context.Context, *CompleteTourExecutionRequest) (*TourExecutionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CompleteTourExecution not implemented")
}
func (UnimplementedTourExecutionServiceServer) mustEmbedUnimplementedTourExecutionServiceServer() {}
func (UnimplementedTourExecutionServiceServer) testEmbeddedByValue()                              {}

// UnsafeTourExecutionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TourExecutionServiceServer will
// result in compilation errors.
type UnsafeTourExecutionServiceServer interface {
	mustEmbedUnimplementedTourExecutionServiceServer()
}

func RegisterTourExecutionServiceServer(s grpc.ServiceRegistrar, srv TourExecutionServiceServer) {
	// If the following call pancis, it indicates UnimplementedTourExecutionServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&TourExecutionService_ServiceDesc, srv)
}

func _TourExecutionService_AbandonTourExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AbandonTourExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourExecutionServiceServer).AbandonTourExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourExecutionService_AbandonTourExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourExecutionServiceServer).AbandonTourExecution(ctx, req.(*AbandonTourExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _TourExecutionService_CompleteTourExecution_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CompleteTourExecutionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TourExecutionServiceServer).CompleteTourExecution(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: TourExecutionService_CompleteTourExecution_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TourExecutionServiceServer).CompleteTourExecution(ctx, req.(*CompleteTourExecutionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TourExecutionService_ServiceDesc is the grpc.ServiceDesc for TourExecutionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TourExecutionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "tours.TourExecutionService",
	HandlerType: (*TourExecutionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AbandonTourExecution",
			Handler:    _TourExecutionService_AbandonTourExecution_Handler,
		},
		{
			MethodName: "CompleteTourExecution",
			Handler:    _TourExecutionService_CompleteTourExecution_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/tours/tours.proto",
}
